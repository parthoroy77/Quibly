model User {
  id            String     @id @default(cuid())
  fullName      String?
  email         String     @unique
  phone         String?    @unique
  role          UserRole?
  image         String?
  emailVerified Boolean?
  phoneVerified Boolean?
  status        UserStatus @default(inactive)

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  accounts        Account[]
  sessions        Session[]
  quizzes         Quiz[]
  quizSessions    QuizSession[]
  quizParticipant QuizParticipant[]

  @@index([email, id])
  @@map("Users")
}

enum UserRole {
  admin
  educator
  learner
}

enum UserStatus {
  active
  inactive
  restricted
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?   @db.Text
  password              String?

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, providerId])
  @@map("Accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("Sessions")
}
