model User {
  id            String     @id @default(cuid())
  password      String
  email         String     @unique
  phone         String?    @unique
  fullName      String?
  role          UserRole
  image         String?
  emailVerified DateTime?
  phoneVerified DateTime?
  status        UserStatus @default(learner)

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  accounts        Account[]
  sessions        Session[]
  quizzes         Quiz[]
  quizSessions    QuizSession[]
  quizParticipant QuizParticipant[]

  @@index([email, id])
  @@map("Users")
}

enum UserRole {
  educator
  learner
}

enum UserStatus {
  educator
  learner
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // references
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  // timestamps
  createdAt DateTime @default(now())

  // references
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@map("Sessions")
}
