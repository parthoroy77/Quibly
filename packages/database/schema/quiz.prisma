model Quiz {
  id          String  @id @default(cuid())
  userId      String
  title       String
  description String?

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  author       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions    Question[]
  quizSessions QuizSession[]

  @@map("Quizzes")
}

model Question {
  id          String       @id @default(cuid())
  quizId      String
  text        String
  type        QuestionType
  points      Int          @default(1)
  mediaUrl    String?
  explanation String?
  index       Int
  timeLimit   Int          @default(30)

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  quiz                Quiz                       @relation(fields: [quizId], references: [id])
  options             QuestionOption[]
  correctAnswer       CorrectAnswer?
  correctMultiOptions CorrectMultiSelectOption[]
  studentAnswers      StudentAnswer[]

  @@map("Questions")
}

enum QuestionType {
  multiple_choice_single
  multiple_choice_multi
  true_false
  short_answer
}

model QuestionOption {
  id         String  @id @default(cuid())
  questionId String
  text       String
  mediaUrl   String?
  index      Int

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question                  Question                   @relation(fields: [questionId], references: [id])
  correctAnswer             CorrectAnswer[]
  correctMultiSelectOptions CorrectMultiSelectOption[]
  studentAnswer             StudentAnswer[]
  studentMultiSelectAnswers StudentMultiSelectAnswer[]

  @@map("QuestionOptions")
}
